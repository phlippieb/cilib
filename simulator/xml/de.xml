<simulator>
	<algorithms>
		 <algorithm id="de1" class="ec.EC">
            <iterationStrategy class="ec.iterationstrategies.DifferentialEvolutionIterationStrategy">
                <crossoverStrategy class="entity.operators.crossover.UniformCrossoverStrategy">
                    <random class="math.random.CauchyDistribution"/>
                </crossoverStrategy>
                <targetVectorSelectionStrategy class="util.selection.recipes.TournamentSelector">
                    <tournamentSize class="controlparameter.ConstantControlParameter" parameter="0.1"/>
                </targetVectorSelectionStrategy>
                <trialVectorCreationStrategy class="entity.operators.creation.RandPerDimensionCreationStrategy"/>
            </iterationStrategy>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy">
                <entityNumber value="100"/>
                <entityType class="ec.Individual"/>
            </initialisationStrategy>
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="100000"/>
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition">
                <measurement class="measurement.single.Fitness"/>
                <predicate class="stoppingcondition.Minimum"/>
                <target value="1"/>
            </addStoppingCondition>
        </algorithm>
        <algorithm id="de2" class="ec.EC">
            <iterationStrategy class="ec.iterationstrategies.DifferentialEvolutionIterationStrategy">
                <crossoverStrategy class="entity.operators.crossover.real.ArithmeticCrossoverStrategy"/>
                <targetVectorSelectionStrategy class="util.selection.recipes.TournamentSelector">
                    <tournamentSize class="controlparameter.ConstantControlParameter" parameter="0.1"/>
                </targetVectorSelectionStrategy>
                <trialVectorCreationStrategy class="entity.operators.creation.RandPerDimensionCreationStrategy"/>
            </iterationStrategy>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy">
                <entityNumber value="100"/>
                <entityType class="ec.Individual"/>
            </initialisationStrategy>
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="100000"/>
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition">
                <measurement class="measurement.single.Fitness"/>
                <predicate class="stoppingcondition.Minimum"/>
                <target value="1"/>
            </addStoppingCondition>
        </algorithm>
	</algorithms>
</simulator>