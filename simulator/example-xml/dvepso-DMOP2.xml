<?xml version="1.0"?>
<!DOCTYPE simulator [
<!ATTLIST algorithm id ID #IMPLIED>
<!ATTLIST problem id ID #IMPLIED>
<!ATTLIST measurements id ID #IMPLIED>
]>
<simulator>
    <algorithms>
        <algorithm id="pso" class="pso.PSO">
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy">
                <entityNumber value="30"/>
	            <entityType class="pso.particle.StandardParticle">
                    <behaviour class="pso.behaviour.StandardParticleBehaviour">
	                    <velocityProvider class="pso.velocityprovider.MOVelocityProvider">
                            <globalGuideProvider class="pso.guideprovider.VEPSOGuideProvider">
		                        <knowledgeTransferStrategy class="algorithm.population.knowledgetransferstrategies.SelectiveKnowledgeTransferStrategy">
		                            <populationSelection class="util.selection.recipes.RandomSelector"/>
		                            <entitySelection class="util.selection.recipes.TournamentSelector"/>
		                        </knowledgeTransferStrategy>
	                        </globalGuideProvider>
    	                    <localGuideProvider class="pso.guideprovider.PBestGuideProvider"/>
                        </velocityProvider>
	                    <positionProvider class="pso.positionprovider.StandardPositionProvider"/>
        	            <boundaryConstraint class="problem.boundaryconstraint.ClampingBoundaryConstraint"/>
	                </behaviour>
	                <neighbourhoodBestUpdateStrategy class="pso.positionprovider.RelaxedNonDominatedNeighbourhoodBestUpdateStrategy"/>
	                <personalBestUpdateStrategy class="pso.pbestupdate.MOOStandardPersonalBestUpdateStrategy"/>
                </entityType>
	        </initialisationStrategy>
            <iterationStrategy class="pso.iterationstrategies.moo.RelaxedNonDominatedMOOSynchronousIterationStrategy"/>
        </algorithm>

        <algorithm id="dvepso-default2obj" class="algorithm.population.RespondingMultiPopulationCriterionBasedAlgorithm">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <objectiveAssignmentStrategy class="moo.criterion.objectiveassignmentstrategies.SequentialObjectiveAssignmentStrategy"/>
            <addPopulationBasedAlgorithm idref="pso"/>
            <addPopulationBasedAlgorithm idref="pso"/>
            <iterationStrategy class="moo.iterationstrategies.HigherLevelArchivingIterationStrategy">
                <archive class="moo.archive.constrained.SetBasedConstrainedArchive" capacity="1000">
                    <pruningSelection class="util.selection.recipes.DistanceBasedElitistSelector">
                    <comparator class="util.selection.arrangement.DistanceComparator"/>
                    </pruningSelection>
                </archive>
                <iterationStrategy class="pso.dynamic.HigherLevelChangedDynamicIterationStrategy">
                    <iterationStrategy class="pso.iterationstrategies.moo.RelaxedNonDominatedMOOSynchronousIterationStrategy">
                        <boundaryConstraint class="problem.boundaryconstraint.ClampingBoundaryConstraint"/>
                    </iterationStrategy>
                    <detectionStrategy class="pso.dynamic.detectionstrategies.MOORandomArchiveSentriesDetectionStrategy">
                        <iterationsModulus value="1"/>
                        <numberOfSentries class="controlparameter.ConstantControlParameter" parameter="2"/>
                    </detectionStrategy>
                    <responseStrategy class="pso.dynamic.responsestrategies.MultiReactionStrategy">
                        <addResponseStrategy class="pso.dynamic.responsestrategies.ArchiveReevaluationResponseStrategy"/>
                        <addResponseStrategy class="pso.dynamic.responsestrategies.ReinitialisationReevaluationReactionStrategy">
                            <reinitialisationRatio value="0.3"/>
                        </addResponseStrategy> 
                    </responseStrategy>
                </iterationStrategy>
            </iterationStrategy>
        </algorithm>

        <algorithm id="dvepso-default3obj" class="algorithm.population.RespondingMultiPopulationCriterionBasedAlgorithm">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <objectiveAssignmentStrategy class="moo.criterion.objectiveassignmentstrategies.SequentialObjectiveAssignmentStrategy"/>
            <addPopulationBasedAlgorithm idref="pso"/>
            <addPopulationBasedAlgorithm idref="pso"/>
            <addPopulationBasedAlgorithm idref="pso"/>
            <iterationStrategy class="moo.iterationstrategies.HigherLevelArchivingIterationStrategy">
                <archive class="moo.archive.constrained.DistanceBasedSetBasedConstrainedArchive" capacity="1000">
                    <pruningSelection class="util.selection.recipes.DistanceBasedElitistSelector">
                    <comparator class="util.selection.arrangement.DistanceComparator"/>
                    </pruningSelection>
                </archive>
                <iterationStrategy class="pso.dynamic.HigherLevelChangedDynamicIterationStrategy">
                    <iterationStrategy class="moo.iterationstrategies.pso.MOOSynchronousIterationStrategy">
                        <boundaryConstraint class="problem.boundaryconstraint.ClampingBoundaryConstraint"/>
                    </iterationStrategy>
                    <detectionStrategy class="pso.dynamic.detectionstrategies.MOORandomArchiveSentriesDetectionStrategy">
                        <iterationsModulus value="1"/>
                        <numberOfSentries class="controlparameter.ConstantControlParameter" parameter="2"/>
                    </detectionStrategy>
                    <responseStrategy class="pso.dynamic.responsestrategies.MultipleResponseStrategy">
                        <addResponseStrategy class="pso.dynamic.responsestrategies.ArchiveReevaluateResponseStrategy"/>
                        <addResponseStrategy class="pso.dynamic.responsestrategies.ReinitializationReevaluationReactionStrategy">
                            <reinitializationRatio value="0.3"/>
                        </addResponseStrategy> 
                    </responseStrategy>
                </iterationStrategy>
            </iterationStrategy>
        </algorithm>

    </algorithms>
        
    <problems>       
        <problem id="FDA1_f1" class="problem.FunctionOptimisationProblem"  domain="R(0:1)^20">
            <function class="functions.continuous.dynamic.moo.fda1.FDA1_f1"/>
        </problem>
        <problem id="FDA1_g*h" class="problem.FunctionOptimisationProblem" domain="R(0:1)^20">
            <function class="functions.continuous.dynamic.moo.fda1.FDA1_f2">
                <setFDA1_g class="functions.continuous.dynamic.moo.fda1.FDA1_g">
                    <n_t value="10"/>
                    <tau_t value="10"/>
                </setFDA1_g>
                <setFDA1_h class="functions.continuous.dynamic.moo.fda1.FDA1_h">
                    <setFDA1_g class="functions.continuous.dynamic.moo.fda1.FDA1_g">
                        <n_t value="10"/>
                        <tau_t value="10"/>
                    </setFDA1_g>
                    <setFDA1_f class="functions.continuous.dynamic.moo.fda1.FDA1_f1"/>
                </setFDA1_h>
            </function>
        </problem>
        <problem id="dmoop_fda1" class="problem.MOOptimisationProblem">
            <add idref="FDA1_f1"/>
            <add idref="FDA1_g*h"/>
        </problem>

	<problem id="FDA3b_f1" class="problem.FunctionOptimisationProblem" domain="R(0:1)">
	  <function id="fda3b_f1" class="functions.continuous.dynamic.moo.fda3mod_camara.FDA3_f1">
	    <n_t value="10"/>
	    <tau_t value="10"/>
	  </function>
	</problem>
	<problem id="FDA3b_g" class="problem.FunctionOptimisationProblem" domain="R(-1:1)^29">
	  <function id="fda3b_g" class="functions.continuous.dynamic.moo.fda3mod_camara.FDA3_g">
	    <n_t value="10"/>
	    <tau_t value="10"/>
	  </function>
	</problem>
	<problem id="FDA3b_h" class="problem.FunctionOptimisationProblem" domain="R(-1:1)^30">
	  <function id="fda3b_h" class="functions.continuous.dynamic.moo.fda3mod_camara.FDA3_h">
	    <setFDA3_g>
	      <problem idref="FDA3b_g"/>
	    </setFDA3_g>
	    <setFDA3_f>
	      <problem idref="FDA3b_f1"/>
	    </setFDA3_f>
	  </function>
	</problem>
	<problem id="FDA3b_g*h" class="problem.FunctionOptimisationProblem" domain="R(-1:1)^30">
	  <function class="functions.continuous.dynamic.moo.fda3mod_camara.FDA3_f2">
	    <setFDA3_g>
	      <problem idref="FDA3b_g"/>
	    </setFDA3_g>
	    <setFDA3_h>
	      <problem idref="FDA3b_h"/>
	    </setFDA3_h>
	  </function>
	</problem>
	<problem id="dmoop_fda3camara" class="problem.MOOptimisationProblem">
          <add idref="FDA3b_f1"/>
          <add idref="FDA3b_g*h"/>
	</problem>

	<problem id="FDA4_g" class="problem.FunctionOptimisationProblem" domain="R(0:1)^10">
	  <function id="fda4_g" class="functions.continuous.dynamic.moo.fda4.FDA4_g">
	    <n_t value="10"/>
	    <tau_t value="10"/>
	    <M value="3"/>
	  </function>
	</problem>
	<problem id="FDA4_f1" class="problem.FunctionOptimisationProblem" domain="R(0:1)^12">
	  <function id="fda4_f1" class="functions.continuous.dynamic.moo.fda4.FDA4_f1">
	    <setFDA4_g>
	      <problem idref="FDA4_g"/>
	    </setFDA4_g>
	    <M value="3"/>
	  </function>
	</problem>
	<problem id="FDA4_fk" class="problem.FunctionOptimisationProblem" domain="R(0:1)^12">
	  <function id="fda4_fk" class="functions.continuous.dynamic.moo.fda4.FDA4_fk">
	    <setFDA4_g>
	      <problem idref="FDA4_g"/>
	    </setFDA4_g>
	    <M value="3"/>
	    <K value="2"/>
	  </function>
	</problem>
	<problem id="FDA4_fm" class="problem.FunctionOptimisationProblem" domain="R(0:1)^12">
	  <function id="fda4_fm" class="functions.continuous.dynamic.moo.fda4.FDA4_fm">
	    <setFDA4_g>
	      <problem idref="FDA4_g"/>
	    </setFDA4_g>
	    <M value="3"/>
	  </function>
	</problem>
	<problem id="dmoop_fda4" class="problem.MOOptimisationProblem">
          <add idref="FDA4_f1"/>
          <add idref="FDA4_fk"/>
          <add idref="FDA4_fm"/>
	</problem>

	<problem id="FDA5_g" class="problem.FunctionOptimisationProblem" domain="R(0:1)^10">
	  <function id="fda5_g" class="functions.continuous.dynamic.moo.fda5.FDA5_g">
	    <M value="3"/>
	    <n_t value="10"/>
	    <tau_t value="10"/>
	  </function>
	</problem>
	<problem id="FDA5_f1" class="problem.FunctionOptimisationProblem" domain="R(0:1)^12">
	  <function id="fda5_f1" class="functions.continuous.dynamic.moo.fda5.FDA5_f1">
	    <setFDA5_g>
	      <problem idref="FDA5_g"/>
	    </setFDA5_g>
	    <M value="3"/>
	    <n_t value="10"/>
	    <tau_t value="10"/>
	  </function>
	</problem>
	<problem id="FDA5_fk" class="problem.FunctionOptimisationProblem" domain="R(0:1)^12">
	  <function id="fda5_fk" class="functions.continuous.dynamic.moo.fda5.FDA5_fk">
	    <setFDA5_g>
	      <problem idref="FDA5_g"/>
	    </setFDA5_g>
	    <M value="3"/>
	    <K value="2"/>
	    <n_t value="10"/>
	    <tau_t value="10"/>
	  </function>
	</problem>
	<problem id="FDA5_fm" class="problem.FunctionOptimisationProblem" domain="R(0:1)^12">
	  <function id="fda5_fm" class="functions.continuous.dynamic.moo.fda5.FDA5_fm">
	    <setFDA5_g>
	      <problem idref="FDA5_g"/>
	    </setFDA5_g>
	    <M value="3"/>
	    <n_t value="10"/>
	    <tau_t value="10"/>
	  </function>
	</problem>
	<problem id="dmoop_fda5" class="problem.MOOptimisationProblem">
          <add idref="FDA5_f1"/>
          <add idref="FDA5_fk"/>
          <add idref="FDA5_fm"/>
	</problem>

	<problem id="DIMP1_f1" class="problem.FunctionOptimisationProblem" domain="R(0:1)">
            <function class="functions.continuous.dynamic.moo.dimp1.DIMP1_f1"/>
        </problem>
        <problem id="DIMP1_g" class="problem.FunctionOptimisationProblem" domain="R(-1:1)^24">
	  <function class="functions.continuous.dynamic.moo.dimp1.DIMP1_g">
	    <n_t value="10"/>
	    <tau_t value="10"/>
	  </function>
        </problem>
        <problem id="dimp1_h" class="problem.FunctionOptimisationProblem" domain="R(-1:1)^25">
	  <function id="dimp1_h" class="functions.continuous.dynamic.moo.dimp1.DIMP1_h">
	    <setDIMP1_g>
	      <problem idref="DIMP1_g"/>
	    </setDIMP1_g>
	    <setDIMP1_f>
	      <problem idref="DIMP1_f1"/>
	    </setDIMP1_f>
	  </function>
        </problem>
        <problem id="DIMP1_g*h" class="problem.FunctionOptimisationProblem" domain="R(-1:1)^25">
	  <function class="functions.continuous.dynamic.moo.dimp1.DIMP1_f2">
	    <setDIMP1_g>
	      <problem idref="DIMP1_g"/>
	    </setDIMP1_g>
	    <setDIMP1_h>
	      <problem idref="dimp1_h"/>
	    </setDIMP1_h>
	  </function>
        </problem>
        <problem id="dmoop_dimp1" class="problem.MOOptimisationProblem">
	  <add idref="DIMP1_f1"/>
	  <add idref="DIMP1_g*h"/>
        </problem> 

	<problem id="DIMP2_f1" class="problem.FunctionOptimisationProblem" domain="R(0:1)">
	  <function class="functions.continuous.dynamic.moo.dimp2.DIMP2_f1"/>
        </problem>
        <problem id="DIMP2_g" class="problem.FunctionOptimisationProblem" domain="R(-2:2)^9">
	  <function class="functions.continuous.dynamic.moo.dimp2.DIMP2_g">
	    <n_t value="10"/>
	    <tau_t value="10"/>
	  </function>
        </problem>
        <problem id="dimp2_h" class="problem.FunctionOptimisationProblem" domain="R(-2:2)^10">
	  <function id="dimp2_h" class="functions.continuous.dynamic.moo.dimp2.DIMP2_h">
	    <setDIMP2_g>
	      <problem idref="DIMP2_g"/>
	    </setDIMP2_g>
	    <setDIMP2_f>
	      <problem idref="DIMP2_f1"/>
	    </setDIMP2_f>
	  </function>
        </problem>
        <problem id="DIMP2_g*h" class="problem.FunctionOptimisationProblem" domain="R(-2:2)^10">
	  <function class="functions.continuous.dynamic.moo.dimp2.DIMP2_f2">
	    <setDIMP2_g>
	      <problem idref="DIMP2_g"/>
	    </setDIMP2_g>
	    <setDIMP2_h>
	      <problem idref="dimp2_h"/>
	    </setDIMP2_h>
	  </function>
        </problem>
        <problem id="dmoop_dimp2" class="problem.MOOptimisationProblem">
	  <add idref="DIMP2_f1"/>
	  <add idref="DIMP2_g*h"/>
        </problem> 
	
	<problem id="DMOP2_f1" class="problem.FunctionOptimisationProblem" domain="R(0:1)">
	  <function id="dmop2_f1" class="functions.continuous.dynamic.moo.dmop2.DMOP2_f1"/>
        </problem>
	<problem id="DMOP2_g" class="problem.FunctionOptimisationProblem" domain="R(0:1)^9">
	  <function id="dmop2_g" class="functions.continuous.dynamic.moo.dmop2.DMOP2_g">
	    <n_t value="10"/>
	    <tau_t value="10"/>
	  </function>
	</problem>
	<problem id="DMOP2_h" class="problem.FunctionOptimisationProblem" domain="R(0:1)^10">
	  <function id="dmop2_h" class="functions.continuous.dynamic.moo.dmop2.DMOP2_h">
	    <n_t value="10"/>
	    <tau_t value="10"/>
	    <setDMOP2_g>
	      <problem idref="DMOP2_g"/>
	    </setDMOP2_g>
	    <setDMOP2_f>
	      <problem idref="DMOP2_f1"/>
	    </setDMOP2_f>
	  </function>
	</problem>
	<problem id="DMOP2_g*h" class="problem.FunctionOptimisationProblem" domain="R(0:1)^10">
	  <function class="functions.continuous.dynamic.moo.dmop2.DMOP2_f2">
	    <setDMOP2_g>
	      <problem idref="DMOP2_g"/>
	    </setDMOP2_g>
	    <setDMOP2_h>
	      <problem idref="DMOP2_h"/>
	    </setDMOP2_h>
	  </function>
	</problem>
	<problem id="dmoop_dmop2" class="problem.MOOptimisationProblem">
	  <add idref="DMOP2_f1"/>
	  <add idref="DMOP2_g*h"/>
	</problem>

	<problem id="DMOP3_f1" class="problem.FunctionOptimisationProblem" domain="R(0:1)^10">
	  <function id="dmop3_f1" class="functions.continuous.dynamic.moo.dmop3.DMOP3_f1">
	    <tau_t value="10"/>
	  </function>
	</problem>
	<problem id="DMOP3_h" class="problem.FunctionOptimisationProblem" domain="R(0:1)^10">
	  <function id="dmop3_h" class="functions.continuous.dynamic.moo.dmop3.DMOP3_h">
	    <n_t value="10"/>
	    <tau_t value="10"/>
	    <setDMOP3_g>
	      <problem idref="DMOP3_g"/>
	    </setDMOP3_g>
	    <setDMOP3_f>
	      <problem idref="DMOP3_f1"/>
	    </setDMOP3_f>
	  </function>
	</problem>
	<problem id="DMOP3_g" class="problem.FunctionOptimisationProblem" domain="R(0:1)^10">
	  <function id="dmop3_g" class="functions.continuous.dynamic.moo.dmop3.DMOP3_g">
	    <n_t value="10"/>
	    <tau_t value="10"/>
	    <setDMOP3_f>
	      <problem idref="DMOP3_f1"/>
	    </setDMOP3_f>
	  </function>
	</problem>
	<problem id="DMOP3_g*h" class="problem.FunctionOptimisationProblem" domain="R(0:1)^10">
	  <function class="functions.continuous.dynamic.moo.dmop3.DMOP3_f2">
	    <setDMOP3_g>
	      <problem idref="DMOP3_g"/>
	    </setDMOP3_g>
	    <setDMOP3_h>
	      <problem idref="DMOP3_h"/>
	    </setDMOP3_h>
	  </function>
	</problem>
	<problem id="dmoop_dmop3" class="problem.MOOptimisationProblem">
	  <add idref="DMOP3_f1"/>
	  <add idref="DMOP3_g*h"/>
	</problem>

	<problem id="HE1_f1" class="problem.FunctionOptimisationProblem" domain="R(0:1)">
	  <function id="dmop1_f1" class="functions.discontinuous.dynamic.moo.he1.HE1_f1"/>
	</problem>
	<problem id="HE1_g" class="problem.FunctionOptimisationProblem" domain="R(0:1)^29">
	  <function id="dmop1_g" class="functions.discontinuous.dynamic.moo.he1.HE1_g"/>
	</problem>
	<problem id="HE1_h" class="problem.FunctionOptimisationProblem" domain="R(0:1)^30">
	  <function id="dmop1_h" class="functions.discontinuous.dynamic.moo.he1.HE1_h">
	    <n_t value="10"/>
	    <tau_t value="10"/>
	    <setHE1_g>
	      <problem idref="HE1_g"/>
	    </setHE1_g>
	    <setHE1_f>
	      <problem idref="HE1_f1"/>
	    </setHE1_f>
	  </function>
	</problem>
	<problem id="HE1_g*h" class="problem.FunctionOptimisationProblem" domain="R(0:1)^30">
	  <function class="functions.discontinuous.dynamic.moo.he1.HE1_f2">
	    <setHE1_g>
	      <problem idref="HE1_g"/>
	    </setHE1_g>
	    <setHE1_h>
	      <problem idref="HE1_h"/>
	    </setHE1_h>
	  </function>
	</problem>
	<problem id="dmoop_he1" class="problem.MOOptimisationProblem">
	  <add idref="HE1_f1"/>
	  <add idref="HE1_g*h"/>
	</problem>

	<problem id="HE2_f1" class="problem.FunctionOptimisationProblem" domain="R(0:1)">
	  <function id="dmop1_f1" class="functions.discontinuous.dynamic.moo.he2.HE2_f1"/>
	</problem>
	<problem id="HE2_g" class="problem.FunctionOptimisationProblem" domain="R(0:1)^29">
	  <function id="dmop1_g" class="functions.discontinuous.dynamic.moo.he2.HE2_g"/>
	</problem>
	<problem id="HE2_h" class="problem.FunctionOptimisationProblem" domain="R(0:1)^30">
	  <function id="dmop1_h" class="functions.discontinuous.dynamic.moo.he2.HE2_h">
	    <n_t value="10"/>
	    <tau_t value="10"/>
	    <setHE2_g>
	      <problem idref="HE2_g"/>
	    </setHE2_g>
	    <setHE2_f>
	      <problem idref="HE2_f1"/>
	    </setHE2_f>
	  </function>
	</problem>
	<problem id="HE2_g*h" class="problem.FunctionOptimisationProblem" domain="R(0:1)^30">
	  <function class="functions.discontinuous.dynamic.moo.he2.HE2_f2">
	    <setHE2_g>
	      <problem idref="HE2_g"/>
	    </setHE2_g>
	    <setHE2_h>
	      <problem idref="HE2_h"/>
	    </setHE2_h>
	  </function>
	</problem>
	<problem id="dmoop_he2" class="problem.MOOptimisationProblem">
	  <add idref="HE2_f1"/>
	  <add idref="HE2_g*h"/>
	</problem>

	<problem id="HEF4_f1" class="problem.FunctionOptimisationProblem" domain="R(-1:1)^10">
	  <function id="hef4_f1" class="functions.continuous.dynamic.moo.hef4.HEF4_f1"/>
	</problem>
	<problem id="HEF4_g" class="problem.FunctionOptimisationProblem" domain="R(-1:1)^10">
	  <function id="hef4_g" class="functions.continuous.dynamic.moo.hef4.HEF4_g"/>
	</problem>
	<problem id="HEF4_h" class="problem.FunctionOptimisationProblem" domain="R(-1:1)^10">
	  <function id="hef4_h" class="functions.continuous.dynamic.moo.hef4.HEF4_h">
	    <n_t value="10"/>
	    <tau_t value="10"/>
	    <setHEF4_g>
	      <problem idref="HEF4_g"/>
	    </setHEF4_g>
	    <setHEF4_f>
	      <problem idref="HEF4_f1"/>
	    </setHEF4_f>
	  </function>
	</problem>
	<problem id="HEF4_g*h" class="problem.FunctionOptimisationProblem" domain="R(-1:1)^10">
	  <function class="functions.continuous.dynamic.moo.hef4.HEF4_f2">
	    <setHEF4_g>
	      <problem idref="HEF4_g"/>
	    </setHEF4_g>
	    <setHEF4_h>
	      <problem idref="HEF4_h"/>
	    </setHEF4_h>
	  </function>
	</problem>
	<problem id="dmoop_hef4" class="problem.MOOptimisationProblem">
	  <add idref="HEF4_f1"/>
	  <add idref="HEF4_g*h"/>
	</problem>

	<problem id="HEF5_f1" class="problem.FunctionOptimisationProblem" domain="R(-1:1)^10">
	  <function id="hef5_f1" class="functions.continuous.dynamic.moo.hef5.HEF5_f1"/>
	</problem>
	<problem id="HEF5_g" class="problem.FunctionOptimisationProblem" domain="R(-1:1)^10">
	  <function id="hef5_g" class="functions.continuous.dynamic.moo.hef5.HEF5_g"/>
	</problem>
	<problem id="HEF5_h" class="problem.FunctionOptimisationProblem" domain="R(-1:1)^10">
	  <function id="hef5_h" class="functions.continuous.dynamic.moo.hef5.HEF5_h">
	    <n_t value="10"/>
	    <tau_t value="10"/>
	    <setHEF5_g>
	      <problem idref="HEF5_g"/>
	    </setHEF5_g>
	    <setHEF5_f>
	      <problem idref="HEF5_f1"/>
	    </setHEF5_f>
	  </function>
	</problem>
	<problem id="HEF5_g*h" class="problem.FunctionOptimisationProblem" domain="R(-1:1)^10">
	  <function class="functions.continuous.dynamic.moo.hef5.HEF5_f2">
	    <setHEF5_g>
	      <problem idref="HEF5_g"/>
	    </setHEF5_g>
	    <setHEF5_h>
	      <problem idref="HEF5_h"/>
	    </setHEF5_h>
	  </function>
	</problem>
	<problem id="dmoop_hef5" class="problem.MOOptimisationProblem">
	  <add idref="HEF5_f1"/>
	  <add idref="HEF5_g*h"/>
	</problem>

	<problem id="HEF8_f1" class="problem.FunctionOptimisationProblem" domain="R(0:1)^10">
	  <function id="hef8_f1" class="functions.continuous.dynamic.moo.hef8.HEF8_f1"/>
	</problem>
	<problem id="HEF8_g" class="problem.FunctionOptimisationProblem" domain="R(0:1)^10">
	  <function id="hef8_g" class="functions.continuous.dynamic.moo.hef8.HEF8_g"/>
	</problem>
	<problem id="HEF8_h" class="problem.FunctionOptimisationProblem" domain="R(0:1)^10">
	  <function id="hef8_h" class="functions.continuous.dynamic.moo.hef8.HEF8_h">
	    <n_t value="10"/>
	    <tau_t value="10"/>
	    <setHEF8_g>
	      <problem idref="HEF8_g"/>
	    </setHEF8_g>
	    <setHEF8_f>
	      <problem idref="HEF8_f1"/>
	    </setHEF8_f>
	  </function>
	</problem>
	<problem id="HEF8_g*h" class="problem.FunctionOptimisationProblem" domain="R(0:1)^10">
	  <function class="functions.continuous.dynamic.moo.hef8.HEF8_f2">
	    <setHEF8_g>
	      <problem idref="HEF8_g"/>
	    </setHEF8_g>
	    <setHEF8_h>
	      <problem idref="HEF8_h"/>
	    </setHEF8_h>
	  </function>
	</problem>
	<problem id="dmoop_hef8" class="problem.MOOptimisationProblem">
	  <add idref="HEF8_f1"/>
	  <add idref="HEF8_g*h"/>
	</problem>
    </problems>

    <measurements id="fitness" class="simulator.MeasurementSuite" resolution="1">
      <addMeasurement class="measurement.multiple.moo.HypervolumeRefVector"/>
      <addMeasurement class="measurement.multiple.moo.ParetoOptimalFront"/>
    </measurements>

    <simulations>
      <simulation samples="30">
	<algorithm idref="dvepso-default2obj"/>
	<problem idref="dmoop_dmop2"/>
	<measurements idref="fitness"/>
	<output format="TXT" file="data/dvepso-dmop2-nt10-taut10.txt"/>
      </simulation>
    </simulations>
</simulator>
