<?xml version="1.0"?>
<!DOCTYPE simulator [
<!ATTLIST algorithm id ID #IMPLIED>
<!ATTLIST problem id ID #IMPLIED>
<!ATTLIST measurements id ID #IMPLIED>
]>
<simulator>
    <algorithms>
        <algorithm id="firefly" class="ff.FFA">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" />
            <iterationStrategy class="ff.iterationstrategies.StandardFireflyIterationStrategy" />
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy">
                <entityType class="ff.firefly.StandardFirefly">
                    <positionUpdateStrategy class="ff.positionupdatestrategies.StandardFireflyPositionUpdateStrategy">
                        <!-- alpha determines the randomness of the fireflies -->
                        <alpha class="controlparameter.LinearlyVaryingControlParameter" initialValue="0.2" finalValue="0.0" />
                        <!-- betaMin controls the minimum attraction of neighbouring fireflies -->
                        <betaMin class="controlparameter.ConstantControlParameter" parameter="0.2"/>
                        <!-- gamma determines the light absorbtion: as gamma -> 0, the algorithm
                        behaves more like the standard PSO, as gamma -> infinity it behaves
                        like a random search algorithm -->
                        <gamma class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                    </positionUpdateStrategy>
                </entityType>
            </initialisationStrategy>
        </algorithm>
    </algorithms>

    <problems>
        <problem id="yang1" class="problem.FunctionOptimisationProblem" domain="R(-20:20)^30">
            <function class="functions.continuous.unconstrained.Yang1">
                <beta class="controlparameter.ConstantControlParameter" parameter="15" />
                <m class="controlparameter.ConstantControlParameter" parameter="5" />
            </function>
        </problem>
        <problem id="yang2" class="problem.FunctionOptimisationProblem" domain="R(-6.28318:6.28318)^30">
            <function class="functions.continuous.unconstrained.Yang2"/>
        </problem>
        <problem id="yang3" class="problem.FunctionOptimisationProblem" domain="R(-0:10)^2">
            <function class="functions.continuous.unconstrained.Yang3">
                <alpha class="controlparameter.ConstantControlParameter" parameter="1"/>
                <beta class="controlparameter.ConstantControlParameter" parameter="1"/>
            </function>
        </problem>
        <problem id="yang4" class="problem.FunctionOptimisationProblem" domain="R(-5:5)^30">
            <function class="functions.continuous.unconstrained.Yang4"/>
        </problem>
    </problems>

    <measurements id="fitness" class="simulator.MeasurementSuite" resolution="10">
        <addMeasurement class="measurement.single.Fitness"/>
    </measurements>

    <simulations>
        <simulation samples="5">
            <algorithm idref="firefly"/>
            <problem idref="yang1"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/firefly-yang1.txt" />
        </simulation>
        <simulation samples="5">
            <algorithm idref="firefly"/>
            <problem idref="yang2"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/firefly-yang2.txt" />
        </simulation>
        <simulation samples="5">
            <algorithm idref="firefly"/>
            <problem idref="yang3"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/firefly-yang3.txt" />
        </simulation>
        <simulation samples="5">
            <algorithm idref="firefly"/>
            <problem idref="yang4"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/firefly-yang4.txt" />
        </simulation>
    </simulations>
</simulator>
