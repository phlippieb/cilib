<simulator>
    <algorithms>

        <!-- 
            gbest pso
            defaults, with RandomBoundaryConstraint
        -->
        <algorithm id="gbest.25" class="pso.PSO">
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy">
                <entityNumber value="25"/>
                <entityType class="pso.particle.StandardParticle"/>
            </initialisationStrategy>
            <iterationStrategy class="pso.iterationstrategies.SynchronousIterationStrategy">
                <boundaryConstraint class="problem.boundaryconstraint.RandomBoundaryConstraint" />
            </iterationStrategy>
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="2000"/>
        </algorithm>



        <!--
            lbest pso
            Defauts, with LBestTopology and RandomBoundaryConstraint
        -->
        <algorithm id="lbest.25" class="pso.PSO">
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy">
                <entityNumber value="25"/>
                <entityType class="pso.particle.StandardParticle"/>
            </initialisationStrategy>
            <iterationStrategy class="pso.iterationstrategies.SynchronousIterationStrategy">
                <boundaryConstraint class="problem.boundaryconstraint.RandomBoundaryConstraint" />
            </iterationStrategy>
            <topology class="entity.topologies.LBestTopology"/>
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="2000"/>
        </algorithm>



        <!--
            von neumann pso
            Defauts, with LBestTopology and RandomBoundaryConstraint
        -->
        <algorithm id="vn.25" class="pso.PSO">
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy">
                <entityNumber value="25"/>
                <entityType class="pso.particle.StandardParticle"/>
            </initialisationStrategy>
            <iterationStrategy class="pso.iterationstrategies.SynchronousIterationStrategy">
                <boundaryConstraint class="problem.boundaryconstraint.RandomBoundaryConstraint" />
            </iterationStrategy>
            <topology class="entity.topologies.VonNeumannTopology"/>
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="2000"/>
        </algorithm>



        <!--
            guaranteed convergence pso with star topology
            GCVelocityProvider, RandomBoundaryConstraint, LBestTopology
        -->
        <algorithm id="gcring.25" class="pso.PSO">
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy">
                <entityNumber value="25"/>
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.GCVelocityProvider"/>
                </entityType>
            </initialisationStrategy>
            <iterationStrategy class="pso.iterationstrategies.SynchronousIterationStrategy">
                <boundaryConstraint class="problem.boundaryconstraint.RandomBoundaryConstraint" />
            </iterationStrategy>
            <topology class="entity.topologies.LBestTopology"/>
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="2000"/>
        </algorithm>

        <!--
            guaranteed convergence pso with ring topology
            GCVelocityProvider, RandomBoundaryConstraint, GBestTopology
        -->
        <algorithm id="gcstar.25" class="pso.PSO">
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy">
                <entityNumber value="25"/>
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.GCVelocityProvider"/>
                </entityType>
            </initialisationStrategy>
            <iterationStrategy class="pso.iterationstrategies.SynchronousIterationStrategy">
                <boundaryConstraint class="problem.boundaryconstraint.RandomBoundaryConstraint" />
            </iterationStrategy>
            <topology class="entity.topologies.GBestTopology"/>
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="2000"/>
        </algorithm>

        <!--
            guaranteed convergence pso with von neumann topology
            GCVelocityProvider, RandomBoundaryConstraint, VonNeumannBestTopology
        -->
        <algorithm id="gcvn.25" class="pso.PSO">
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy">
                <entityNumber value="25"/>
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.GCVelocityProvider"/>
                </entityType>
            </initialisationStrategy>
            <iterationStrategy class="pso.iterationstrategies.SynchronousIterationStrategy">
                <boundaryConstraint class="problem.boundaryconstraint.RandomBoundaryConstraint" />
            </iterationStrategy>
            <topology class="entity.topologies.VonNeumannTopology"/>
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="2000"/>
        </algorithm>


        <!--
            Social PSO
            StandardVelocityProvider w/ cognitive acceleration = 0, RandomBoundaryConstraint, VonNeumannTopology
        -->
        <algorithm id="spso.25" class="pso.PSO">
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy">
                <entityNumber value="25"/>
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">
                        <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="0"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>
            <iterationStrategy class="pso.iterationstrategies.SynchronousIterationStrategy">
                <boundaryConstraint class="problem.boundaryconstraint.RandomBoundaryConstraint"/>
            </iterationStrategy>
            <topology class="entity.topologies.GBestTopology"/>
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="2000"/>
        </algorithm>


        <!--
            Cognitive PSO
            ClampingVelocityProvider with socialAcceleration = 0, RandomBoundaryConstraint, VonNeumannTopology
            ToDo: remove clamping velocity provider
        -->
        <algorithm id="cpso.25" class="pso.PSO">
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy">
                <entityNumber value="25"/>
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="0"/>
                            <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="1.5" />
                            <inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.99" />
                        </delegate>
                        <vMax class="controlparameter.ConstantControlParameter" parameter="100"/>
                    </velocityProvider>
                    <velocityInitialisationStrategy class="entity.initialisation.RandomBoundedInitialisationStrategy">
                        <lowerBound class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                        <upperBound class="controlparameter.ConstantControlParameter" parameter="100.0"/>
                    </velocityInitialisationStrategy>
                </entityType>
            </initialisationStrategy>
            <iterationStrategy class="pso.iterationstrategies.SynchronousIterationStrategy">
                <boundaryConstraint class="problem.boundaryconstraint.RandomBoundaryConstraint"/>
            </iterationStrategy>
            <!-- irrelevant --> <!--topology class="entity.topologies.VonNeumannTopology"/-->
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="2000"/>
        </algorithm>


        <!--
            BareBones PSO
            BareBonesVelocityProvider with exploitProbability = 0,
                meaning position update is always sampled from mean between pbest and nbest
            RandomBoundaryConstraint
        -->
        <algorithm id="bb.25" class="pso.PSO">
            <iterationStrategy class="pso.iterationstrategies.SynchronousIterationStrategy">
                <boundaryConstraint class="problem.boundaryconstraint.RandomBoundaryConstraint"/>
            </iterationStrategy>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy">
                <entityNumber value="25"/>
                <entityType class="pso.particle.StandardParticle">
                    <positionProvider class="pso.positionprovider.LinearPositionProvider"/>
                    <velocityProvider class="pso.velocityprovider.BareBonesVelocityProvider">
                        <exploitProbability class="controlparameter.ConstantControlParameter" parameter="0"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
        </algorithm>


        <!--
            BareBones Exploit PSO
            BareBonesVelocityProvider with exploitProbability = 0.5,
                meaning position update can also simply be set to pbest
            RabndomBoundaryContstraint
        -->
        <algorithm id="bbe.25" class="pso.PSO">
            <iterationStrategy class="pso.iterationstrategies.SynchronousIterationStrategy" >
                <boundaryConstraint class="problem.boundaryconstraint.RandomBoundaryConstraint"/>
            </iterationStrategy>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy">
                <entityNumber value="25"/>
                <entityType class="pso.particle.StandardParticle">
                    <positionProvider class="pso.positionprovider.LinearPositionProvider"/>
                    <velocityProvider class="pso.velocityprovider.BareBonesVelocityProvider">
                        <exploitProbability class="controlparameter.ConstantControlParameter" parameter="0.5"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="2000"/>
        </algorithm>


    </algorithms>
</simulator>